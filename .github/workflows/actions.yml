name: 'terraform deploy to Azure'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: #this attribute will enable the manual run to the pipeline
  

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
defaults:
  run:
    shell: bash
env: 
  ROOT_PATH: '${{github.workspace}}'
  ARM_CLIENT_ID: ${{secrets.CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{secrets.SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{secrets.TENANT_ID}}
  STAGE_NAME: production

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v1
      #secrets.TF_API_TOKEN is built in variables
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt
      working-directory: ${{ env.ROOT_PATH }}
        
    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ${{ env.ROOT_PATH }}
      
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: ${{ env.ROOT_PATH }}
      
    - name: Terraform Plan
      id: plan    
      run: terraform plan   
      working-directory: ${{ env.ROOT_PATH }}
      
  terraform_apply:
    name: 'terraform apply'
    needs: [terraform]
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v2
 
    - name: Setup terraform
      uses: hashicorp/setup-terraform@v1
      #secrets.TF_API_TOKEN is built in variables
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
 
    - name: terraform Init
      id: init
      run: terraform init
      working-directory: ${{ env.ROOT_PATH }}

    - name: terraform Apply
      run: terraform apply -auto-approve
      id: apply
#    #  if: ${{inputs.tf_destroy}} == false
      working-directory: ${{ env.ROOT_PATH }}

    # - name: terraform destroy
    #   run: terraform destroy -auto-approve
    #   if: ${{inputs.tf_destroy}} == true
    #   working-directory: ${{ env.ROOT_PATH }}
